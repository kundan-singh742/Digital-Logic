module CalculatorFSM
(
		input ENTR, CLK, CLR, RST, Function,
		input [3:0]Row,
		output [3:0] Column,
		output [6:0] HEX0, HEX1, HEX2, HEX3, HEX3P
);

		wire Slow_Clock, E_C_SYNC;
		wire [7:0] InputValue, sout, z;
		parameter S0 = 2'b00,  S1 = 2'b01,  S2 = 2'b10,  S3 = 2'b11; 
		reg RESET, loadA, loadB, loadR, loadOU, iUAU; 
		reg[1:0] state, nextstate;
		
	clock_div #(64,2500000) slow_clock
	(
		.clk(CLK) ,	// input  clk_sig
		.reset(~CLR) ,	// input  reset_sig
		.clk_out(Slow_Clock) 	// output  clk_out_sig
	);
	
	EdgeDetect EdgeDetect_inst
	(
		.in(ENTR) ,	// input  in_sig
		.clock(Slow_Clock) ,	// input  clock_sig
		.out(E_C_SYNC) 	// output  out_sig
	);
	
	always @(posedge E_C_SYNC, negedge CLR)
		if(CLR == 1'b0) state <= S0;
				else state <= nextstate;
				
	always @(state)
		case (state)
			S0: begin RESET = 1'b0; loadA = 1'b0; loadB = 1'b0; loadR = 1'b0; iUAU = 1'b0; loadOU = 1'b0; nextstate <= S1; end
			S1: begin RESET = 1'b0; loadA = 1'b1; loadB = 1'b0; loadR = 1'b0; iUAU = 1'b0; loadOU = 1'b0; nextstate <= S2; end
			S2: begin RESET = 1'b1; loadA = 1'b0; loadB = 1'b1; loadR = 1'b0; iUAU = 1'b0; loadOU = 1'b0; nextstate <= S3; end
			S3: begin RESET = 1'b1; loadA = 1'b0; loadB = 1'b0; loadR = 1'b1; iUAU = 1'b1; loadOU = 1'b1; end
		endcase
	
	InputUnit IU
(
	.CLK(Clock) ,	// input  CLK_sig
	.CLR(CLR) ,	// input  CLR_sig
	.ROW(Row) ,	// input [3:0] ROW_sig
	.COLUMN(Column) ,	// output [3:0] COLUMN_sig
	.OUTPUT(InputValue) ,	// output [7:0] OUTPUT_sig
	.check() ,	// output  check_sig
	.junk() 	// output  junk_sig
);

EightBitAU AU
(
	.inputValue(InputValue) ,	// input [7:0] inputValue_sig
	.CLKA(loadA) ,	// input  CLKA_sig
	.CLKB(loadB) ,	// input  CLKB_sig
	.CLKO(loadR) ,	// input  CLKO_sig
	.clear(~CLR) ,	// input  clear_sig
	.AddorSubtract(Function) ,	// input  AddorSubtract_sig
	.hex0() ,	// output [6:0] hex0_sig
	.hex1() ,	// output [6:0] hex1_sig
	.hex2() ,	// output [6:0] hex2_sig
	.hex3() ,	// output [6:0] hex3_sig
	.hex4() ,	// output [6:0] hex4_sig
	.hex5() ,	// output [6:0] hex5_sig
	.Aout() ,	// output [7:0] Aout_sig
	.Bout() ,	// output [7:0] Bout_sig
	.Sout(sout) ,	// output [7:0] Sout_sig
	.OVERFLOW() ,	// output  OVERFLOW_sig
	.CARRY() 	// output  CARRY_sig
);

assign z = (iUAU == 0)? B: sout;

OutputUnit OutputUnit_inst
(
	.in(z) ,	// input [7:0] in_sig
	.out() ,	// output [7:0] out_sig
	.hex0(HEX0) ,	// output [6:0] hex0_sig
	.hex1(HEX1) ,	// output [6:0] hex1_sig
	.hex2(HEX2) ,	// output [6:0] hex2_sig
	.hex3(HEX3) ,	// output [6:0] hex3_sig
	.ones_out() ,	// output [3:0] ones_out_sig
	.tens_out() ,	// output [3:0] tens_out_sig
	.hundred_out() ,	// output [3:0] hundred_out_sig
	.sign_out() 	// output [3:0] sign_out_sig
);

endmodule


