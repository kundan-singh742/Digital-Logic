// Copyright (C) 2020  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.


// Generated by Quartus Prime Version 20.1 (Build Build 720 11/11/2020)
// Created on Thu Dec 01 01:23:34 2022

EightBitAU EightBitAU_inst
(
	.inputValue(inputValue_sig) ,	// input [7:0] inputValue_sig
	.CLKA(CLKA_sig) ,	// input  CLKA_sig
	.CLKB(CLKB_sig) ,	// input  CLKB_sig
	.CLKO(CLKO_sig) ,	// input  CLKO_sig
	.clear(clear_sig) ,	// input  clear_sig
	.AddorSubtract(AddorSubtract_sig) ,	// input  AddorSubtract_sig
	.hex0(hex0_sig) ,	// output [6:0] hex0_sig
	.hex1(hex1_sig) ,	// output [6:0] hex1_sig
	.hex2(hex2_sig) ,	// output [6:0] hex2_sig
	.hex3(hex3_sig) ,	// output [6:0] hex3_sig
	.hex4(hex4_sig) ,	// output [6:0] hex4_sig
	.hex5(hex5_sig) ,	// output [6:0] hex5_sig
	.Aout(Aout_sig) ,	// output [7:0] Aout_sig
	.Bout(Bout_sig) ,	// output [7:0] Bout_sig
	.Sout(Sout_sig) ,	// output [7:0] Sout_sig
	.OVERFLOW(OVERFLOW_sig) ,	// output  OVERFLOW_sig
	.CARRY(CARRY_sig) 	// output  CARRY_sig
);

