// Copyright (C) 2020  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/11/2022 08:42:11"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          EightBitAU
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module EightBitAU_vlg_vec_tst();
// constants                                           
// general purpose registers
reg AddorSubtract;
reg CLKA;
reg CLKB;
reg CLKO;
reg clear;
reg [7:0] inputValue;
// wires                                               
wire [7:0] Aout;
wire [7:0] Bout;
wire CARRY;
wire OVERFLOW;
wire [7:0] Sout;
wire [6:0] hex0;
wire [6:0] hex1;
wire [6:0] hex2;
wire [6:0] hex3;
wire [6:0] hex4;
wire [6:0] hex5;

// assign statements (if any)                          
EightBitAU i1 (
// port map - connection between master ports and signals/registers   
	.AddorSubtract(AddorSubtract),
	.Aout(Aout),
	.Bout(Bout),
	.CARRY(CARRY),
	.CLKA(CLKA),
	.CLKB(CLKB),
	.CLKO(CLKO),
	.OVERFLOW(OVERFLOW),
	.Sout(Sout),
	.clear(clear),
	.hex0(hex0),
	.hex1(hex1),
	.hex2(hex2),
	.hex3(hex3),
	.hex4(hex4),
	.hex5(hex5),
	.inputValue(inputValue)
);
initial 
begin 
#1000000 $finish;
end 
// inputValue[ 7 ]
initial
begin
	inputValue[7] = 1'bX;
	inputValue[7] = #20000 1'b0;
	inputValue[7] = #40000 1'bX;
	inputValue[7] = #30000 1'b0;
	inputValue[7] = #20000 1'b1;
	inputValue[7] = #20000 1'bX;
	inputValue[7] = #30000 1'b1;
	inputValue[7] = #20000 1'b0;
	inputValue[7] = #20000 1'bX;
	inputValue[7] = #30000 1'b1;
	inputValue[7] = #40000 1'bX;
	inputValue[7] = #30000 1'b1;
	inputValue[7] = #40000 1'bX;
	inputValue[7] = #30000 1'b1;
	inputValue[7] = #40000 1'bX;
	inputValue[7] = #30000 1'b0;
	inputValue[7] = #40000 1'bX;
	inputValue[7] = #30000 1'b0;
end 
// inputValue[ 6 ]
initial
begin
	inputValue[6] = 1'bX;
	inputValue[6] = #20000 1'b1;
	inputValue[6] = #20000 1'b0;
	inputValue[6] = #20000 1'bX;
	inputValue[6] = #30000 1'b1;
	inputValue[6] = #40000 1'bX;
	inputValue[6] = #30000 1'b0;
	inputValue[6] = #40000 1'bX;
	inputValue[6] = #30000 1'b0;
	inputValue[6] = #40000 1'bX;
	inputValue[6] = #30000 1'b1;
	inputValue[6] = #40000 1'bX;
	inputValue[6] = #30000 1'b1;
	inputValue[6] = #40000 1'bX;
	inputValue[6] = #30000 1'b1;
	inputValue[6] = #20000 1'b0;
	inputValue[6] = #20000 1'bX;
	inputValue[6] = #30000 1'b0;
	inputValue[6] = #20000 1'b1;
	inputValue[6] = #20000 1'b0;
end 
// inputValue[ 5 ]
initial
begin
	inputValue[5] = 1'bX;
	inputValue[5] = #20000 1'b1;
	inputValue[5] = #20000 1'b0;
	inputValue[5] = #20000 1'bX;
	inputValue[5] = #30000 1'b1;
	inputValue[5] = #40000 1'bX;
	inputValue[5] = #30000 1'b1;
	inputValue[5] = #40000 1'bX;
	inputValue[5] = #30000 1'b1;
	inputValue[5] = #20000 1'b0;
	inputValue[5] = #20000 1'bX;
	inputValue[5] = #30000 1'b0;
	inputValue[5] = #40000 1'bX;
	inputValue[5] = #30000 1'b1;
	inputValue[5] = #40000 1'bX;
	inputValue[5] = #30000 1'b0;
	inputValue[5] = #20000 1'b1;
	inputValue[5] = #20000 1'bX;
	inputValue[5] = #30000 1'b1;
	inputValue[5] = #20000 1'b0;
end 
// inputValue[ 4 ]
initial
begin
	inputValue[4] = 1'bX;
	inputValue[4] = #20000 1'b1;
	inputValue[4] = #20000 1'b0;
	inputValue[4] = #20000 1'bX;
	inputValue[4] = #30000 1'b1;
	inputValue[4] = #40000 1'bX;
	inputValue[4] = #30000 1'b0;
	inputValue[4] = #20000 1'b1;
	inputValue[4] = #20000 1'bX;
	inputValue[4] = #30000 1'b1;
	inputValue[4] = #40000 1'bX;
	inputValue[4] = #30000 1'b1;
	inputValue[4] = #20000 1'b0;
	inputValue[4] = #20000 1'bX;
	inputValue[4] = #30000 1'b1;
	inputValue[4] = #40000 1'bX;
	inputValue[4] = #30000 1'b1;
	inputValue[4] = #20000 1'b0;
	inputValue[4] = #20000 1'bX;
	inputValue[4] = #30000 1'b1;
	inputValue[4] = #20000 1'b0;
end 
// inputValue[ 3 ]
initial
begin
	inputValue[3] = 1'bX;
	inputValue[3] = #20000 1'b1;
	inputValue[3] = #20000 1'b0;
	inputValue[3] = #20000 1'bX;
	inputValue[3] = #30000 1'b1;
	inputValue[3] = #40000 1'bX;
	inputValue[3] = #30000 1'b1;
	inputValue[3] = #20000 1'b0;
	inputValue[3] = #20000 1'bX;
	inputValue[3] = #30000 1'b1;
	inputValue[3] = #40000 1'bX;
	inputValue[3] = #30000 1'b1;
	inputValue[3] = #40000 1'bX;
	inputValue[3] = #30000 1'b1;
	inputValue[3] = #40000 1'bX;
	inputValue[3] = #30000 1'b0;
	inputValue[3] = #40000 1'bX;
	inputValue[3] = #30000 1'b1;
	inputValue[3] = #20000 1'b0;
end 
// inputValue[ 2 ]
initial
begin
	inputValue[2] = 1'bX;
	inputValue[2] = #20000 1'b1;
	inputValue[2] = #20000 1'b0;
	inputValue[2] = #20000 1'bX;
	inputValue[2] = #30000 1'b1;
	inputValue[2] = #40000 1'bX;
	inputValue[2] = #30000 1'b0;
	inputValue[2] = #40000 1'bX;
	inputValue[2] = #30000 1'b0;
	inputValue[2] = #20000 1'b1;
	inputValue[2] = #20000 1'bX;
	inputValue[2] = #30000 1'b1;
	inputValue[2] = #40000 1'bX;
	inputValue[2] = #30000 1'b1;
	inputValue[2] = #40000 1'bX;
	inputValue[2] = #30000 1'b0;
	inputValue[2] = #20000 1'b1;
	inputValue[2] = #20000 1'bX;
	inputValue[2] = #30000 1'b0;
	inputValue[2] = #20000 1'b1;
	inputValue[2] = #20000 1'b0;
end 
// inputValue[ 1 ]
initial
begin
	inputValue[1] = 1'bX;
	inputValue[1] = #20000 1'b1;
	inputValue[1] = #20000 1'b0;
	inputValue[1] = #20000 1'bX;
	inputValue[1] = #30000 1'b1;
	inputValue[1] = #40000 1'bX;
	inputValue[1] = #30000 1'b1;
	inputValue[1] = #40000 1'bX;
	inputValue[1] = #30000 1'b1;
	inputValue[1] = #40000 1'bX;
	inputValue[1] = #30000 1'b0;
	inputValue[1] = #40000 1'bX;
	inputValue[1] = #30000 1'b1;
	inputValue[1] = #40000 1'bX;
	inputValue[1] = #30000 1'b1;
	inputValue[1] = #20000 1'b0;
	inputValue[1] = #20000 1'bX;
	inputValue[1] = #30000 1'b0;
	inputValue[1] = #20000 1'b1;
	inputValue[1] = #20000 1'b0;
end 
// inputValue[ 0 ]
initial
begin
	inputValue[0] = 1'bX;
	inputValue[0] = #20000 1'b1;
	inputValue[0] = #40000 1'bX;
	inputValue[0] = #30000 1'b1;
	inputValue[0] = #40000 1'bX;
	inputValue[0] = #30000 1'b0;
	inputValue[0] = #20000 1'b1;
	inputValue[0] = #20000 1'bX;
	inputValue[0] = #30000 1'b0;
	inputValue[0] = #40000 1'bX;
	inputValue[0] = #30000 1'b1;
	inputValue[0] = #40000 1'bX;
	inputValue[0] = #30000 1'b1;
	inputValue[0] = #40000 1'bX;
	inputValue[0] = #30000 1'b0;
	inputValue[0] = #20000 1'b1;
	inputValue[0] = #20000 1'bX;
	inputValue[0] = #30000 1'b0;
end 

// CLKA
initial
begin
	CLKA = 1'b0;
	CLKA = #30000 1'b1;
	CLKA = #10000 1'b0;
	CLKA = #60000 1'b1;
	CLKA = #10000 1'b0;
	CLKA = #60000 1'b1;
	CLKA = #10000 1'b0;
	CLKA = #60000 1'b1;
	CLKA = #10000 1'b0;
	CLKA = #60000 1'b1;
	CLKA = #10000 1'b0;
	CLKA = #60000 1'b1;
	CLKA = #10000 1'b0;
	CLKA = #60000 1'b1;
	CLKA = #10000 1'b0;
	CLKA = #60000 1'b1;
	CLKA = #10000 1'b0;
end 

// CLKB
initial
begin
	CLKB = 1'b0;
	CLKB = #50000 1'b1;
	CLKB = #10000 1'b0;
	CLKB = #60000 1'b1;
	CLKB = #10000 1'b0;
	CLKB = #60000 1'b1;
	CLKB = #10000 1'b0;
	CLKB = #60000 1'b1;
	CLKB = #10000 1'b0;
	CLKB = #60000 1'b1;
	CLKB = #10000 1'b0;
	CLKB = #60000 1'b1;
	CLKB = #10000 1'b0;
	CLKB = #60000 1'b1;
	CLKB = #10000 1'b0;
	CLKB = #60000 1'b1;
	CLKB = #10000 1'b0;
end 

// AddorSubtract
initial
begin
	AddorSubtract = 1'b0;
	AddorSubtract = #70000 1'b1;
	AddorSubtract = #10000 1'b0;
	AddorSubtract = #60000 1'b1;
	AddorSubtract = #10000 1'b0;
	AddorSubtract = #60000 1'b1;
	AddorSubtract = #10000 1'b0;
	AddorSubtract = #60000 1'b1;
	AddorSubtract = #10000 1'b0;
	AddorSubtract = #60000 1'b1;
	AddorSubtract = #10000 1'b0;
	AddorSubtract = #60000 1'b1;
	AddorSubtract = #10000 1'b0;
	AddorSubtract = #60000 1'b1;
	AddorSubtract = #10000 1'b0;
	AddorSubtract = #60000 1'b1;
	AddorSubtract = #10000 1'b0;
end 

// CLKO
initial
begin
	CLKO = 1'b0;
	CLKO = #60000 1'b1;
	CLKO = #10000 1'b0;
	CLKO = #10000 1'b1;
	CLKO = #10000 1'b0;
	CLKO = #40000 1'b1;
	CLKO = #10000 1'b0;
	CLKO = #10000 1'b1;
	CLKO = #10000 1'b0;
	CLKO = #40000 1'b1;
	CLKO = #10000 1'b0;
	CLKO = #10000 1'b1;
	CLKO = #10000 1'b0;
	CLKO = #40000 1'b1;
	CLKO = #10000 1'b0;
	CLKO = #10000 1'b1;
	CLKO = #10000 1'b0;
	CLKO = #40000 1'b1;
	CLKO = #10000 1'b0;
	CLKO = #10000 1'b1;
	CLKO = #10000 1'b0;
	CLKO = #40000 1'b1;
	CLKO = #10000 1'b0;
	CLKO = #10000 1'b1;
	CLKO = #10000 1'b0;
	CLKO = #40000 1'b1;
	CLKO = #10000 1'b0;
	CLKO = #10000 1'b1;
	CLKO = #10000 1'b0;
	CLKO = #40000 1'b1;
	CLKO = #10000 1'b0;
	CLKO = #10000 1'b1;
	CLKO = #10000 1'b0;
end 

// clear
initial
begin
	clear = 1'b1;
	clear = #10000 1'b0;
	clear = #10000 1'b1;
	clear = #630000 1'b0;
	clear = #10000 1'b1;
end 
endmodule

